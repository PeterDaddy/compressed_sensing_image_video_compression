classdef intra_inter_prediction
   methods (Static)
       function candidate_value = intra_prediction(a, b, i, j)
            if(i == 1 && j == 1) %___No prediction for the first block as always
                lt = 0;
                for candidate_indexing    = 1:2*b
                    t(candidate_indexing) = 0;
                    l(candidate_indexing) = 0;
                end
            elseif(i == 1 && j > 1) %___Oh ho ho only left mode
                lt = 0;
                t  = zeros(1,2*b);
                l  = [a{i,j-1}(1,b) ...
                      a{i,j-1}(2,b) ...
                      a{i,j-1}(3,b) ...
                      a{i,j-1}(4,b) ...
                      a{i+1,j-1}(1,b) ...
                      a{i+1,j-1}(2,b) ...
                      a{i+1,j-1}(3,b) ...
                      a{i+1,j-1}(4,b)];
            elseif(i > 1 && j == 1) %___Oh ho ho only top mode
                lt =  0;
                t  = [a{i-1,j}(b,1) ...
                      a{i-1,j}(b,2) ...
                      a{i-1,j}(b,3) ...
                      a{i-1,j}(b,4) ...
                      a{i-1,j+1}(b,1) ...
                      a{i-1,j+1}(b,2) ...
                      a{i-1,j+1}(b,3) ...
                      a{i-1,j+1}(b,4)];
                l     = zeros(1,2*b);
            else %___Oh ho ho left and top now
                if(i > b && j > b) %___Passes the first block___
                    lt = a{i-1,j-1}(b,4);
                else
                    lt = 0;
                end
                if(i == size(a,1) || j == size(a,2))
                    t  = [a{i-1,j}(b,1) ...
                          a{i-1,j}(b,2) ...
                          a{i-1,j}(b,3) ...
                          a{i-1,j}(b,4) ...
                          0 ...
                          0 ...
                          0 ...
                          0];
                    l  = [a{i,j-1}(1,b) ...
                          a{i,j-1}(2,b) ...
                          a{i,j-1}(3,b) ...
                          a{i,j-1}(4,b) ...
                          0 ...
                          0 ...
                          0 ...
                          0];
                else
                    t  = [a{i-1,j}(b,1) ...
                          a{i-1,j}(b,2) ...
                          a{i-1,j}(b,3) ...
                          a{i-1,j}(b,4) ...
                          a{i-1,j+1}(b,1) ...
                          a{i-1,j+1}(b,2) ...
                          a{i-1,j+1}(b,3) ...
                          a{i-1,j+1}(b,4)];
                    l  = [a{i,j-1}(1,b) ...
                          a{i,j-1}(2,b) ...
                          a{i,j-1}(3,b) ...
                          a{i,j-1}(4,b) ...
                          a{i+1,j-1}(1,b) ...
                          a{i+1,j-1}(2,b) ...
                          a{i+1,j-1}(3,b) ...
                          a{i+1,j-1}(4,b)];
                end
            end
            intra_prediction_obj = intra_prediction_9_modes;
            candidate_value      = intra_prediction_obj.sum_of_absolute_difference(intra_prediction_obj.vertical_replication(t,b), ...
                                                                                   intra_prediction_obj.horizonatal_replication(l,b), ...
                                                                                   intra_prediction_obj.mean_dc(l,t,b), ...
                                                                                   intra_prediction_obj.diagonal_down_left(t), ...
                                                                                   intra_prediction_obj.diagonal_down_right(l,t,lt), ...
                                                                                   intra_prediction_obj.vertical_right(l,t,lt), ...
                                                                                   intra_prediction_obj.horizontal_down(l,t,lt), ...
                                                                                   intra_prediction_obj.vertical_left(t), ...
                                                                                   intra_prediction_obj.horizontal_up(l), ...
                                                                                   a{i,j});
       end
       function candidate_value = inter_prediction(a, b, i, j)
           for mag_i = -simulation_parameter.s_wd_s_level_2+simulation_parameter.s_wd_s_offset_level_2:simulation_parameter.s_wd_s_level_2-simulation_parameter.s_wd_s_offset_level_2
               for mag_j = -simulation_parameter.s_wd_s_level_2+simulation_parameter.s_wd_s_offset_level_2:simulation_parameter.s_wd_s_level_2-simulation_parameter.s_wd_s_offset_level_2
                   mag_i_pos = find(mag_i== -simulation_parameter.s_wd_s_level_2+simulation_parameter.s_wd_s_offset_level_2:simulation_parameter.s_wd_s_level_2-simulation_parameter.s_wd_s_offset_level_2);
                   mag_j_pos = find(mag_j== -simulation_parameter.s_wd_s_level_2+simulation_parameter.s_wd_s_offset_level_2:simulation_parameter.s_wd_s_level_2-simulation_parameter.s_wd_s_offset_level_2);
                   mag_search(mag_i_pos,mag_j_pos) = norm(y.buffer_encoder_1{i+mag_i+simulation_parameter.s_wd_s_offset_level_2,j+mag_j+simulation_parameter.s_wd_s_offset_level_2,k} - a{i,j,k});
               end
           end

           minus_positions = -simulation_parameter.s_wd_s_level_2+simulation_parameter.s_wd_s_offset_level_2:simulation_parameter.s_wd_s_level_2-simulation_parameter.s_wd_s_offset_level_2;
           if(sum(sum(mag_search(:,:)))~=0)
               [sub_s_wd_i, sub_s_wd_j] = find(min(mag_search(mag_search > 0)) == mag_search(:,:));
           else
               sub_s_wd_i = 1; sub_s_wd_j = 1;
           end
           y.predicted_encoder_inter = (y.buffer_encoder_1{i+simulation_parameter.s_wd_s_offset_level_2+(min(minus_positions(sub_s_wd_i))),j+simulation_parameter.s_wd_s_offset_level_2+(min(minus_positions(sub_s_wd_j))),k});
       end
   end
end